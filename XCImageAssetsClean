#!/usr/bin/env ruby

require 'json'
require 'fileutils'
require 'optparse'
require 'tmpdir'

# NameOfImage_29x29_minimum-system-version=7.0_@2x~universal-portrait

class XCImageAssetsCleaner

    CONTENTS_FILENAME = 'Contents.json'
    IMAGES_FOLDER_SUFFIX = '.imageset'

    CONTENTS_IMAGES_KEY = 'images'

    IMAGES_SCALE_KEY = 'scale'
    IMAGES_FILENAME_KEY = 'filename'
    IMAGES_SIZE_KEY = 'size'
    IMAGES_IDIOM_KEY = 'idiom'
    IMAGES_ORIENTATION_KEY = 'orientation'

    KnownSuffixKeys = [IMAGES_SCALE_KEY, IMAGES_FILENAME_KEY, IMAGES_SIZE_KEY, IMAGES_IDIOM_KEY, IMAGES_ORIENTATION_KEY]

    def initialize(options)
        @renamedFiles = {}
        @options = options
    end

    def base_image_name_for_directory directoryString
        imageName = directoryString.lines('/').last

        if imageName.end_with?(IMAGES_FOLDER_SUFFIX)
            imageName = imageName[0..-(IMAGES_FOLDER_SUFFIX.length + 1)]
        end

        return imageName
    end

    def unknown_suffixes imageDict
        unknownSuffixes = []

        imageDict.each do |key, val|
            if !KnownSuffixKeys.include?(key)
                unknownSuffixes << "#{key}=#{val}"
            end
        end

        return unknownSuffixes
    end

    def image_suffixes imageDict
        imageSuffixes = ""

        size = imageDict[IMAGES_SIZE_KEY]
        if size
            imageSuffixes = imageSuffixes + "_#{size}_"
        end

        unknownSuffixes = unknown_suffixes imageDict
        if unknownSuffixes.length > 0
            imageSuffixes = imageSuffixes + unknownSuffixes.join('_') + '_'
        end

        scale = imageDict[IMAGES_SCALE_KEY]
        if scale
            imageSuffixes = imageSuffixes + "@#{scale}"
        end

        idiom = imageDict[IMAGES_IDIOM_KEY]
        if idiom
            imageSuffixes = imageSuffixes + "~#{idiom}"
        end

        orientation = imageDict[IMAGES_ORIENTATION_KEY]
        if orientation
            imageSuffixes = imageSuffixes + "-#{orientation}"
        end

        return imageSuffixes
    end

    def image_name imageDict, directoryString
        baseImageName = base_image_name_for_directory directoryString
        imageSuffixes = image_suffixes imageDict
        return baseImageName + imageSuffixes
    end

    def replace_first_occurrence_in_file oldText, newText, fileString
        allText = File.read(fileString)
        newText = allText.sub(/#{oldText}/, newText)
        File.open(fileString, "w") { |file| file.puts newText }
    end

    def clean_image_dict imageDict, directoryString
        if imageDict[IMAGES_FILENAME_KEY] && imageDict[IMAGES_SCALE_KEY]
            oldFilename = imageDict[IMAGES_FILENAME_KEY]
            oldFileString = "#{directoryString}/#{oldFilename}"

            imageName = image_name imageDict, directoryString
            fileExt = oldFilename.lines('.').last

            newFilename = "#{imageName}.#{fileExt}"
            newDirectoryString = directoryString.reverse.chomp(@origDir.reverse).concat(@tempDir.reverse).reverse
            newFileString = "#{newDirectoryString}/#{newFilename}"

            begin
                FileUtils.cp(oldFileString, newFileString)
            rescue SystemCallError => err
                if err.errno == Errno::ENOENT::Errno
                    puts "File not be found: #{oldFileString}"
                    puts "Named in #{directoryString}/#{CONTENTS_FILENAME}"
                    puts
                else
                    raise
                end
            end

            newContentsFileString = "#{newDirectoryString}/#{CONTENTS_FILENAME}"
            replace_first_occurrence_in_file(oldFilename, newFilename, newContentsFileString) 
        else
            ignore = false
            imageDict.keys.each do |key|
                if imageDict[key] == @options.ignoredKVPairs[key]
                    ignore = true
                end
            end

            if !ignore
                puts "Image data does not include filename:"
                puts "#{directoryString}/#{CONTENTS_FILENAME}"
                puts imageDict
                puts
            end
        end
    end

    def clean_images_in directoryString
        directoryString.chomp!('/')

        newDirectoryString = directoryString.reverse.chomp(@origDir.reverse).concat(@tempDir.reverse).reverse
        oldContentsFileString = "#{directoryString}/#{CONTENTS_FILENAME}"
        newContentsFileString = "#{newDirectoryString}/#{CONTENTS_FILENAME}"

        if !File.exist?(newContentsFileString)
            FileUtils.cp(oldContentsFileString, newContentsFileString)
        end

        contents = JSON.parse(File.read("#{directoryString}/#{CONTENTS_FILENAME}"))
        contents[CONTENTS_IMAGES_KEY].each do |imageDict|
            clean_image_dict imageDict, directoryString
        end
    end

    def clean_directory directoryString
        directoryString.chomp!('/')

        newDirectoryString = directoryString.reverse.chomp(@origDir.reverse).concat(@tempDir.reverse).reverse
        Dir.mkdir(newDirectoryString)

        if File.exist?("#{directoryString}/#{CONTENTS_FILENAME}")
            clean_images_in directoryString
        else
            Dir.glob("#{directoryString}/*/").each do |subdir|
                clean_directory subdir
            end
        end
    end

    def clean xcassets
        Dir.mktmpdir('xc-assets-cleaner') {|dir|
            @origDir = xcassets

            origDirName = xcassets.lines('/').last

            Dir.mkdir("#{dir}/#{origDirName}", 0700)
            @tempDir = "#{dir}/#{origDirName}"

            Dir.glob("#{xcassets}/*/").each do |subdir|
                clean_directory subdir
            end

            FileUtils.remove_dir(@origDir)
            FileUtils.cp_r(@tempDir, @origDir.lines('/')[0..-1].join('/'))

            @origDir = nil
            @tempDir = nil

            puts "#{$PROGRAM_NAME.lines('/').last}: Finished cleaning xcassets: #{xcassets}"
        }
        

        @renamedFiles = {}
    end
end

class XCImageAssetsCleanerOptions
    attr_reader :ignoredKVPairs
    
    def initialize
        @ignoredKVPairs = {'scale' => '1x'}

        @optionParser = OptionParser.new do |opts|
            opts.banner = "Usage: XCImageAssetsCleaner [options] [.xcassets folder]"

            opts.separator ""
            opts.separator "Options:"

            opts.on_tail("--strict",
                    "Warns about missing files for all images in a Contents.json.",
                    "Normally ignores 1x scale") do |strict|
                if strict
                    @ignoredKVPairs = {}
                end
            end
        end
    end

    def parse! args
        @optionParser.parse!(args)
    end

    def help
        return @optionParser.help
    end
end

# Script start

options = XCImageAssetsCleanerOptions.new
options.parse!(ARGV)

if ARGV.length != 1
    puts options.help
    exit 1
end
    
xcassets = ARGV[0]

if File.exist?(xcassets) && File.directory?(xcassets)
    cleaner = XCImageAssetsCleaner.new(options)
    cleaner.clean xcassets
    exit 0
else
    puts "Given XCAssets folder does not exist"
    exit 1
end
